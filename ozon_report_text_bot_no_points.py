
import os
import pandas as pd
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes
from io import BytesIO

TOKEN = "8099481188:AAHUX-YObV1GLyswZj_VFptqNZO_ZI77dvI"

sku_costs = {
    "–§–°–û_MAX_2": 215,
    "–§–°–û_MAX_4": 415,
    "FARA_NIVA_2": 1060,
}

sku_names = {
    "–§–°–û_MAX_2": "üì¶ –§–°–û_MAX_2",
    "–§–°–û_MAX_4": "üì¶ –§–°–û_MAX_4",
    "FARA_NIVA_2": "üì¶ FARA_NIVA_2"
}

expense_labels = {
    "–ö–æ–º–∏—Å—Å–∏—è": "üßæ –ö–æ–º–∏—Å—Å–∏—è",
    "–õ–æ–≥–∏—Å—Ç–∏–∫–∞": "üöö –õ–æ–≥–∏—Å—Ç–∏–∫–∞",
    "–†–µ–∫–ª–∞–º–∞": "üì¢ –†–µ–∫–ª–∞–º–∞",
    "–¢—Ä–∞—Ñ–∞—Ä–µ—Ç—ã": "üß∑ –¢—Ä–∞—Ñ–∞—Ä–µ—Ç—ã",
    "–ü–æ–¥–ø–∏—Å–∫–∞ Premium Plus": "üé´ –ü–æ–¥–ø–∏—Å–∫–∞ Premium Plus",
    "–ö—Ä–æ—Å—Å-–¥–æ–∫–∏–Ω–≥": "üì¶ –ö—Ä–æ—Å—Å-–¥–æ–∫–∏–Ω–≥",
    "–≠–∫–≤–∞–π—Ä–∏–Ω–≥": "üí≥ –≠–∫–≤–∞–π—Ä–∏–Ω–≥",
    "–í–æ–∑–≤—Ä–∞—Ç –≤—ã—Ä—É—á–∫–∏": "üîÅ –í–æ–∑–≤—Ä–∞—Ç –≤—ã—Ä—É—á–∫–∏",
    "–î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ü–í–ó": "üì¨ –î–æ—Å—Ç–∞–≤–∫–∞ –¥–æ –ü–í–ó",
    "–í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞": "üè™ –í—ã–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞",
    "–ü—Ä–æ–≥—Ä–∞–º–º—ã –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤": "ü§ù –ü—Ä–æ–≥—Ä–∞–º–º—ã –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤",
    "–ë–æ–Ω—É—Å—ã –ø—Ä–æ–¥–∞–≤—Ü–∞": "üéÅ –ë–æ–Ω—É—Å—ã –ø—Ä–æ–¥–∞–≤—Ü–∞",
    "–í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è": "‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏—è",
    "–û–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞": "üì¶ –û–±—Ä–∞—Ç–Ω–∞—è –ª–æ–≥–∏—Å—Ç–∏–∫–∞",
    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–∞–∫–∞ –∏ –æ—Ç–∑—ã–≤–æ–≤": "üßπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–∞–∫–∞ –∏ –æ—Ç–∑—ã–≤–æ–≤",
    "–†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –°–¶/–ü–í–ó": "üè¨ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –≤ –°–¶/–ü–í–ó",
    "–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞": "üì¶ –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞",
    "–°—Ç–æ—Ä–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤": "üìâ –°—Ç–æ—Ä–Ω–æ –≤–æ–∑–≤—Ä–∞—Ç–æ–≤"
}

def format_rub(value):
    return f"{value:,.2f} ‚ÇΩ".replace(",", "‚ÄØ")

def extract_report(file_path):
    df = pd.read_excel(file_path, header=None)
    for i in range(10):
        if "–¢–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è" in df.iloc[i].astype(str).values:
            df = pd.read_excel(file_path, header=i)
            break
    else:
        return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Å –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏."

    df.columns = df.columns.str.strip()
    df = df[df["–¢–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"].str.lower() != " "]

    df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = pd.to_numeric(df["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"], errors="coerce").fillna(0)
    df["–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"] = pd.to_numeric(df["–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"], errors="coerce").fillna(0)
    df["–°—É–º–º–∞ –∏—Ç–æ–≥–æ, —Ä—É–±"] = pd.to_numeric(df["–°—É–º–º–∞ –∏—Ç–æ–≥–æ, —Ä—É–±"], errors="coerce").fillna(0)

    sales = df[df["–¢–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"].str.lower() == "–≤—ã—Ä—É—á–∫–∞"].copy()
    sales["–°—É–º–º–∞"] = sales["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] * sales["–¶–µ–Ω–∞ –ø—Ä–æ–¥–∞–≤—Ü–∞"]
    total_revenue = sales["–°—É–º–º–∞"].sum()

    sku_column = next((col for col in df.columns if any(k in col.lower() for k in ["–∞—Ä—Ç–∏–∫—É–ª", "sku", "–æ–±—ä—è–≤–ª–µ–Ω–∏–µ"])), None)
    if not sku_column:
        return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ —Ç–æ–≤–∞—Ä–∞."
    qty_by_sku = sales.groupby(sku_column)["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"].sum().to_dict()
    cost_by_sku = {sku: qty_by_sku.get(sku, 0) * cost for sku, cost in sku_costs.items()}
    total_cost = sum(cost_by_sku.values())

    expenses = df[~df["–¢–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"].str.lower().isin(["–≤—ã—Ä—É—á–∫–∞"])]
    expenses = expenses[~expenses["–¢–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è"].str.lower().str.contains("–±–∞–ª–ª—ã")]
    expenses_sum = expenses.groupby("–¢–∏–ø –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è")["–°—É–º–º–∞ –∏—Ç–æ–≥–æ, —Ä—É–±"].sum().abs().to_dict()
    total_expenses = sum(expenses_sum.values())

    tax = total_revenue * 0.04
    net_profit = total_revenue - total_cost - total_expenses - tax
    gross_margin = (total_revenue - total_cost) / total_revenue * 100
    net_margin = net_profit / total_revenue * 100
    total_qty = sum(qty_by_sku.values())
    avg_check = total_revenue / total_qty if total_qty else 0

    filename = os.path.basename(file_path)

    lines = [f"üìä –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ: {filename}\n"]
    lines.append(f"üí∞ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {format_rub(total_revenue)}")
    lines.append(f"üßæ –°–µ–±–µ—Å—Ç–æ–∏–º–æ—Å—Ç—å: {format_rub(total_cost)}")
    for sku in sku_costs:
        sku_name = sku_names.get(sku, sku)
        lines.append(f"   ‚îú‚îÄ {sku_name}: {format_rub(cost_by_sku.get(sku, 0))}")
    lines[-1] = lines[-1].replace("‚îú‚îÄ", "‚îî‚îÄ")  # –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –±–ª–æ–∫–∞

    lines.append(f"\nüí∏ –ü—Ä–æ—á–∏–µ —Ä–∞—Å—Ö–æ–¥—ã: {format_rub(total_expenses)}")
    keys = list(expenses_sum.keys())
    for i, key in enumerate(keys):
        label = expense_labels.get(key, f"‚ñ´Ô∏è {key}")
        prefix = "‚îî‚îÄ" if i == len(keys)-1 else "‚îú‚îÄ"
        lines.append(f"   {prefix} {label}: {format_rub(expenses_sum[key])}")

    lines += [
        f"\nüìâ –ù–∞–ª–æ–≥ –ø–æ –£–°–ù (4%): {format_rub(tax)}",
        f"\nüü¢ –ß–∏—Å—Ç–∞—è –ø—Ä–∏–±—ã–ª—å: {format_rub(net_profit)}\n",
        f"üßÆ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–¥–∞–∂: {int(total_qty)} —à—Ç."
    ]
    for sku in sku_costs:
        sku_name = sku_names.get(sku, sku)
        lines.append(f"   ‚îú‚îÄ {sku}: {int(qty_by_sku.get(sku, 0))} —à—Ç.")
    lines[-1] = lines[-1].replace("‚îú‚îÄ", "‚îî‚îÄ")

    lines += [
        f"\nüí≥ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_rub(avg_check)}",
        f"üìà –í–∞–ª–æ–≤–∞—è –º–∞—Ä–∂–∞: {gross_margin:.2f}%",
        f"üìä –ß–∏—Å—Ç–∞—è –º–∞—Ä–∂–∞: {net_margin:.2f}%"
    ]
    return "\n".join(lines)

async def handle_file(update: Update, context: ContextTypes.DEFAULT_TYPE):
    file = update.message.document
    if not file.file_name.endswith(".xlsx"):
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ Excel .xlsx —Ñ–∞–π–ª—ã.")
        return

    file_path = f"temp_{file.file_name}"
    new_file = await context.bot.get_file(file.file_id)
    await new_file.download_to_drive(file_path)
    text = extract_report(file_path)
    os.remove(file_path)

    with BytesIO(text.encode("utf-8")) as f:
        f.name = "—Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π_–æ—Ç—á–µ—Ç_OZON.txt"
        await update.message.reply_document(document=InputFile(f))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìé –ü—Ä–∏—à–ª–∏ Excel-—Ñ–∞–π–ª –æ—Ç Ozon ‚Äî —è –≤–µ—Ä–Ω—É —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á—ë—Ç —Å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–æ–π.")

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_file))
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É Excel-—Ñ–∞–π–ª...")
    app.run_polling()

if __name__ == "__main__":
    main()
